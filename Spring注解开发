使用注解定义bean(了解)
->通过注解定义的形式,可以大大减少我们配置文件bean标签的大部分操作

原来:配置文件<bean id="DaoImpl" class="com.Zezai.dao.impl.DaoImpl"/>
使用注解开发:@Component("DaoImpl")->因为在这个类里,所以就省去了配置class这个步骤,只需要写id就行

方法:在需要配置的类里写上组件标签@Component(),并在配置文件里添加一个<context:component-scan base-package="类所在的位置"/>
    扫描器,用于容器扫描我们写的组件(注解)即可,注意,basepakage里的参数如果只写com那么他会扫描com包下的所有注解(推荐com.Zezai)

@Component衍生注解
1.业务层:@Service
2.数据层:@Repository
3.表现层:@Controller
------------------------------------------------------------------------------------------------------------------------
纯注解开发(使用)
Spring升级了纯注解开发模式,使用Java类代替配置文件
如果我们可以把配置文件里的信息放入一个工具类中,就可以取代配置文件了
方法:通过创建类来存放配置即可,在类名上方添加注解@Configuration(表示这是一个配置类)和注解@Component(表示添加了注释扫描器)
                                  所以现在我们可以直接读取配置类来获取容器
使用:我们可以直接把SpringConfig.class作为参数来获取容器而不是通过配置文件(注意:获取容器的实现类变成了AnnotationConfigApplicationContext())
------------------------------------------------------------------------------------------------------------------------
通过注解控制Bean的生命周期
->直接在对应的实现类上添加S@cope("prototype")多例
->直接在对应的实现类里写上init方法和destroy方法,在方法上分别添加@PostConstruct(构造后)和@PreDestroy(销毁前)
------------------------------------------------------------------------------------------------------------------------
通过注解开发实现自动装配(依赖注入)
针对引用数据类型
->只需要在注入的成员位置添加@Autowired注解即可(默认为按类型注入)，（这个类想被注入什么就在这个成员变量上写上这个标签）

Spring通过暴力反射对应属性为私有属性初始化数据,直接获取实现类对象,我们不需要再自己提供set方法注入

针对基本数据类型
->只需要在被注入的成员位置添加@Value注解,参数表示注入的值

同时也可以从外部property里获取值到Value内
->1.在jdbc.properties资源包内输入需要导入的资源
  2.在SpringConfig配置类里加入注解@PropertySource("jdbc.properties")->注意这个是资源包,不是xml文件,里面存放的是键值对,我们通过主键就可以得到里面的值
  3.在Value注解里写上${参数与资源包的资源名一致}

------------------------------------------------------------------------------------------------------------------------
非配置文件实现第三方bean管理
通过定义一个jdbcConfig类,获取到第三方bean
 //1.在JdbcConfig类里定义一个方法获得要管理的对象
 //2.方法上添加@Bean标签,表示当前方法返回的是Bean类型,如果标签不加参数,那么获取DataSource对象时的参数要写成.class形式(不用强转类型因为是按类型装配)
 //3.在SpringConfig配置类里通过Import()引入JdbcConfig类即可
           (注意:引入外部资源时的的类型都是DataSource)

如果第三方需要引入引用数据类型的bean，将需要的bean作为方法的形参即可
->因为容器扫描bean标签后，会查看方法是否有参数，如果有会从自己的容器里找到相应的对象填入

如果需要引入基本数据类型的bean，只需要在jdbcConfig类里创建成员变量填入即可